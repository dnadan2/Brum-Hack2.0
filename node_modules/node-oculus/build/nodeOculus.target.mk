# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := nodeOculus
DEFS_Debug := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions

INCS_Debug := \
	-I/home/sam/.node-gyp/0.10.34/src \
	-I/home/sam/.node-gyp/0.10.34/deps/uv/include \
	-I/home/sam/.node-gyp/0.10.34/deps/v8/include \
	-I$(srcdir)/src/ovr \
	-I$(srcdir)/src/ovr/LibOVR/Src \
	-I$(srcdir)/src/ovr/LibOVR/Src/Kernel \
	-I$(srcdir)/src/ovr/LibOVR/Include

DEFS_Release := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions

INCS_Release := \
	-I/home/sam/.node-gyp/0.10.34/src \
	-I/home/sam/.node-gyp/0.10.34/deps/uv/include \
	-I/home/sam/.node-gyp/0.10.34/deps/v8/include \
	-I$(srcdir)/src/ovr \
	-I$(srcdir)/src/ovr/LibOVR/Src \
	-I$(srcdir)/src/ovr/LibOVR/Src/Kernel \
	-I$(srcdir)/src/ovr/LibOVR/Include

OBJS := \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Alg.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Allocator.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Log.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_RefCount.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_System.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_ThreadsPthread.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Timer.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Service/Service_NetClient.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/OVR_CAPI.o \
	$(obj).target/$(TARGET)/src/ovr/3rdParty/TinyXml/tinyxml2.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/GL/CAPI_GL_DistortionRenderer.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/GL/CAPI_GL_HSWDisplay.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/GL/CAPI_GL_Util.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/CAPI_DistortionRenderer.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/CAPI_FrameTimeManager.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/CAPI_HMDRenderState.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/CAPI_HMDState.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/CAPI/CAPI_HSWDisplay.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Displays/OVR_Display.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Atomic.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_CRC32.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_File.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_FileFILE.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Lockless.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Math.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Service/Service_NetSessionCommon.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_SharedMemory.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_Std.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_String.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_String_FormatUtil.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_String_PathUtil.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_SysFile.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_ThreadCommandQueue.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Kernel/OVR_UTF8Util.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Tracking/Tracking_SensorStateReader.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Util/Util_ImageWindow.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Util/Util_Interface.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Util/Util_LatencyTest2Reader.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Util/Util_Render_Stereo.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/OVR_JSON.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/OVR_Profile.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/OVR_SerialFormat.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/OVR_Stereo.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_BitStream.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_NetworkPlugin.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_PacketizedTCPSocket.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_RPC1.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_Session.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_Socket.o \
	$(obj).target/$(TARGET)/src/ovr/LibOVR/Src/Net/OVR_Unix_Socket.o \
	$(obj).target/$(TARGET)/nodeOculus.o \
	$(obj).target/$(TARGET)/Device.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/nodeOculus.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/nodeOculus.node: LIBS := $(LIBS)
$(obj).target/nodeOculus.node: TOOLSET := $(TOOLSET)
$(obj).target/nodeOculus.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/nodeOculus.node
# Add target alias
.PHONY: nodeOculus
nodeOculus: $(builddir)/nodeOculus.node

# Copy this to the executable output path.
$(builddir)/nodeOculus.node: TOOLSET := $(TOOLSET)
$(builddir)/nodeOculus.node: $(obj).target/nodeOculus.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/nodeOculus.node
# Short alias for building this executable.
.PHONY: nodeOculus.node
nodeOculus.node: $(obj).target/nodeOculus.node $(builddir)/nodeOculus.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/nodeOculus.node

